#include <stdio.h>
#include <stdlib.h>
#define comp 3;
void playermove (void);
char computermove(int);
int playergame (void);
void start_grid (void);
void end_grid (void);
int ending(void);
char a[3][3] = {32,32,32,32,32,32,32,32,32};
char compmove = 'O', pmove;
int player = 1, i , j, pchoice;
int block, flag = 0;

int main () {
    start_grid();
    playergame();
    ln:
    playermove();
    end_grid();
    ending();
    if (flag == 1) {
        return 0;
    }
    
else if (pchoice == 1) {
    if (player == 1) {
    player = 2;
    goto ln;  
                     }
else {
    player = 1;
    goto ln;
     }
                }

else if (pchoice == 2) {

        if (player == 1) {
        player = 3;
        goto ln;
}

else {  
    player = 1;
    goto ln;

     }
}
return 0;
}
    
void start_grid() {
printf("  Two player Tic Tac Toe\n\n");
printf("\t 1 | 2 | 3\n");
printf("\t ----------\n");
printf("\t 4 | 5 | 6\n");
printf("\t ----------\n");
printf("\t 7 | 8 | 9\n\n");
}

int playergame(void) {
int flow = 0;
do {
printf("Would you like to play with your friend or the DUMB computer?\n1. Friend\n2. Computer\n");
printf("Enter Here: ");
scanf("%d", &pchoice);
printf("\n");
if (1 <= pchoice <= 2) {
    flow = 1;
}
else {
    flow = 0;
    printf("Please enter a valid input");
}
 } while (flow = 0);
return (pchoice);
}
void playermove () {
    char v;

    if (player == 1) {
        pmove = 'X'; 
        }
        else if (player == 2) 
        {
             pmove = 'O';
              }
else if (player == 3) {
    pmove = 'O';

}

do {
    if(player == 3) {
    printf("The computer is choosing it's block\n\n");
    block = rand() % 9 + 1;   }
    else {
    printf("Player %d, choose the block to put in %c: ", player, pmove);
scanf("%d", &block);
printf("\n\n");
    }
    ln:
switch (block) {

case 1:
v = a[0][0];
if(a[0][0] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;
    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[0][0] = pmove;
    
}
        break;
case 2:
v = a[0][1];
if(a[0][1] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[0][1] = pmove;
    
}
        break;
case 3:
v = a[0][2];
if(a[0][2] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[0][2] = pmove;
}
        break;
case 4:
v = a[1][0];
if(a[1][0] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[1][0] = pmove;
}
        break;
case 5:
v = a[1][1];
if(a[1][1] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[1][1] = pmove;
}
        break;
case 6:
v = a[1][2];
if(a[1][2] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[1][2] = pmove;
    break;
}
        break;
case 7:
v = a[2][0];
if(a[2][0] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[2][0] = pmove;
}
        break;
case 8:
v = a[2][1];
if(a[2][1] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
};
    
}
else {
    a[2][1] = pmove;
}
        break;
case 9:
v = a[2][2];
if(a[2][2] != ' ') {
    if(player == 3) {
      block = rand() % 9 + 1; goto ln;    }
    else {
    printf("Invalid input, please try again\n");
}
}
else {
    a[2][2] = pmove;
}
        break;
default: 
printf("Please enter a valid input\n\n");

        break;
} } while (v != ' ');

}
void end_grid (void) {
for(i = 0; i <= 2; i++ ) {
    for(j = 0; j < 1; j++) {
        printf(" %c | %c | %c ", a[i][j], a[i][j+1], a[i][j+2]);
 }
    if(i == 2) {
        break;
    }
    else {
    printf("\n------------\n");
   }    
}
printf("\n");
}
int ending () {
if (a[0][0] == a[0][1] && a[0][0] == a[0][2] && a[0][2]  != ' '
|| a[1][0] == a[1][1] && a[1][0] == a[1][2] && a[1][2] != ' ' 
|| a[2][0] == a[2][1] && a[2][0] == a[2][2] && a[2][2] != ' '
|| a[0][0] == a[1][0] && a[0][0] == a[2][0] && a[2][0] != ' ' 
|| a[0][1] == a[1][1] && a[0][1] == a[2][1] && a[2][1] != ' ' 
|| a[0][2] == a[1][2] && a[0][2] == a[2][2] && a[2][2] != ' ' 
|| a[0][0] == a[1][1] && a[0][0] == a[2][2] && a[2][2] != ' ' 
|| a[0][2] == a[1][1] && a[0][2] == a[2][0] && a[2][0] != ' ' ) 
    if (player == 3) {
    printf("Game Over, Computer Wins!\n");
    flag = 1;   
    }
    else if (player == 1 || player == 2) {
        printf("Game Over, Player %d wins", player);
        flag = 1;
        return (flag);               
    }
if (a[0][0] != ' ' && a[0][1] != ' ' && a[0][2] != ' '
      && a[1][0] != ' ' && a[1][1] != ' ' && a[1][2] != ' '
      && a[2][0] != ' ' && a[2][2] != ' ' && a[2][2] != ' ' ) {
    printf("It's a draw!");
    flag = 1;
    return (flag);
}
return (flag);
}   
